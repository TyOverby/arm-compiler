/** * This file was automatically generated by json-schema-to-typescript. * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, * and run json-schema-to-typescript to regenerate this file. */
export type PositiveInteger = number;
export type PositiveIntegerDefault0 = PositiveInteger;
export type SchemaArray = JsonSchema[];
export type StringArray = string[];
export type SimpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string"; /** * Core schema meta-schema */
export interface JsonSchema {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: PositiveInteger;
    minLength?: PositiveIntegerDefault0;
    pattern?: string;
    additionalItems?: boolean | JsonSchema;
    items?: JsonSchema | SchemaArray;
    maxItems?: PositiveInteger;
    minItems?: PositiveIntegerDefault0;
    uniqueItems?: boolean;
    maxProperties?: PositiveInteger;
    minProperties?: PositiveIntegerDefault0;
    required?: StringArray;
    additionalProperties?: boolean | JsonSchema;
    definitions?: { [k: string]: JsonSchema; };
    properties?: { [k: string]: JsonSchema; };
    patternProperties?: { [k: string]: JsonSchema; };
    dependencies?: { [k: string]: JsonSchema | StringArray; };
    enum?: any[];
    type?: SimpleTypes | SimpleTypes[];
    allOf?: SchemaArray;
    anyOf?: SchemaArray;
    oneOf?: SchemaArray;
    not?: JsonSchema;
    $ref: string;
    //[k: string]: any;
}
